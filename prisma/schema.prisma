// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for storing customer information
model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  stripeCustomerId String?       @unique @map("stripe_customer_id")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  
  // Relations
  subscriptions  Subscription[]
  payments       Payment[]
  
  @@map("users")
}

// Subscription model for managing Stripe subscriptions
model Subscription {
  id                   String               @id @default(cuid())
  stripeSubscriptionId String               @unique @map("stripe_subscription_id")
  userId               String               @map("user_id")
  priceId              String               @map("price_id")
  status               SubscriptionStatus
  currentPeriodStart   DateTime             @map("current_period_start")
  currentPeriodEnd     DateTime             @map("current_period_end")
  cancelAtPeriodEnd    Boolean              @default(false) @map("cancel_at_period_end")
  canceledAt           DateTime?            @map("canceled_at")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  
  // Relations
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  price                Price                @relation(fields: [priceId], references: [id])
  
  @@map("subscriptions")
}

// Product model for Stripe products
model Product {
  id          String    @id @default(cuid())
  stripeProductId String @unique @map("stripe_product_id")
  name        String
  description String?
  active      Boolean   @default(true)
  metadata    Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  prices      Price[]
  
  @@map("products")
}

// Price model for Stripe prices
model Price {
  id            String        @id @default(cuid())
  stripePriceId String        @unique @map("stripe_price_id")
  productId     String        @map("product_id")
  unitAmount    Int?          @map("unit_amount") // Amount in cents
  currency      String        @default("usd")
  interval      PriceInterval?
  intervalCount Int?          @map("interval_count")
  trialPeriodDays Int?        @map("trial_period_days")
  type          PriceType
  active        Boolean       @default(true)
  metadata      Json?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  
  // Relations
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  
  @@map("prices")
}

// Payment model for tracking individual payments
model Payment {
  id                String        @id @default(cuid())
  stripePaymentIntentId String    @unique @map("stripe_payment_intent_id")
  userId            String        @map("user_id")
  amount            Int           // Amount in cents
  currency          String        @default("usd")
  status            PaymentStatus
  paymentMethodId   String?       @map("payment_method_id")
  metadata          Json?
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  
  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

// Enums for type safety
enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  PAUSED
}

enum PriceType {
  ONE_TIME
  RECURRING
}

enum PriceInterval {
  DAY
  WEEK
  MONTH
  YEAR
}

enum PaymentStatus {
  REQUIRES_PAYMENT_METHOD
  REQUIRES_CONFIRMATION
  REQUIRES_ACTION
  PROCESSING
  REQUIRES_CAPTURE
  CANCELED
  SUCCEEDED
}
